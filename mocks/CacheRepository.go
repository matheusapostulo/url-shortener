// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/matheusapostulo/url-shortener/internal/url/domain"
	mock "github.com/stretchr/testify/mock"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {	
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *CacheRepository) Get(key string) (*domain.URL, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.URL, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.URL); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: url
func (_m *CacheRepository) Set(url *domain.URL) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.URL) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
