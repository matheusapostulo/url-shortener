// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/matheusapostulo/url-shortener/internal/url/domain"
	mock "github.com/stretchr/testify/mock"
)

// URLRepository is an autogenerated mock type for the URLRepository type
type URLRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *URLRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByLongURL provides a mock function with given fields: longURL
func (_m *URLRepository) FindByLongURL(longURL string) (*domain.URL, error) {
	ret := _m.Called(longURL)

	if len(ret) == 0 {
		panic("no return value specified for FindByLongURL")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.URL, error)); ok {
		return rf(longURL)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.URL); ok {
		r0 = rf(longURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(longURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByShortURL provides a mock function with given fields: shortURL
func (_m *URLRepository) FindByShortURL(shortURL string) (*domain.URL, error) {
	ret := _m.Called(shortURL)

	if len(ret) == 0 {
		panic("no return value specified for FindByShortURL")
	}

	var r0 *domain.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.URL, error)); ok {
		return rf(shortURL)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.URL); ok {
		r0 = rf(shortURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewAvailableID provides a mock function with no fields
func (_m *URLRepository) GetNewAvailableID() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNewAvailableID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: url
func (_m *URLRepository) Save(url *domain.URL) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.URL) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewURLRepository creates a new instance of URLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLRepository {
	mock := &URLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
